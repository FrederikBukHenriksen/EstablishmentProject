//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class UserContextClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAccessibleEstablishments(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/user-context/get-accessible-establishments";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAccessibleEstablishments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAccessibleEstablishments(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string[]>;
        }));
    }

    protected processGetAccessibleEstablishments(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class AnalysisClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    correlationCoefficientAndLag(command: CorrelationCommand): Observable<CorrelationReturn> {
        let url_ = this.baseUrl + "/api/analysis/cross-correlation-with-weather";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCorrelationCoefficientAndLag(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCorrelationCoefficientAndLag(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CorrelationReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CorrelationReturn>;
        }));
    }

    protected processCorrelationCoefficientAndLag(response: HttpResponseBase): Observable<CorrelationReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CorrelationReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    timeOfVisitTotalPrice(command: ClusteringCommand): Observable<ClusteringReturn> {
        let url_ = this.baseUrl + "/api/analysis/Clustering";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTimeOfVisitTotalPrice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTimeOfVisitTotalPrice(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClusteringReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClusteringReturn>;
        }));
    }

    protected processTimeOfVisitTotalPrice(response: HttpResponseBase): Observable<ClusteringReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClusteringReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class AuthenticationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    logIn(command: LoginCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/authentication/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogIn(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogIn(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processLogIn(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    isLoggedIn(): Observable<IsLoggedInReturn> {
        let url_ = this.baseUrl + "/api/authentication/is-logged-in";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIsLoggedIn(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsLoggedIn(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<IsLoggedInReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<IsLoggedInReturn>;
        }));
    }

    protected processIsLoggedIn(response: HttpResponseBase): Observable<IsLoggedInReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IsLoggedInReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    logOut(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/authentication/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogOut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogOut(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processLogOut(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class DataSeedClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    aboveeachother(): Observable<void> {
        let url_ = this.baseUrl + "/api/test/above-each-other";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAboveeachother(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAboveeachother(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAboveeachother(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    seedDatabase(): Observable<void> {
        let url_ = this.baseUrl + "/api/test";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSeedDatabase(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSeedDatabase(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSeedDatabase(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class EstablishmentClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getEstablishmentdID(command: GetEstablishmentsCommand): Observable<GetEstablishmentsIdReturn> {
        let url_ = this.baseUrl + "/api/establishment/get-id";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEstablishmentdID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEstablishmentdID(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetEstablishmentsIdReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetEstablishmentsIdReturn>;
        }));
    }

    protected processGetEstablishmentdID(response: HttpResponseBase): Observable<GetEstablishmentsIdReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetEstablishmentsIdReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getEstablishmentsDTO(command: GetEstablishmentsCommand): Observable<GetEstablishmentsDTOReturn> {
        let url_ = this.baseUrl + "/api/establishment/get-DTO";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEstablishmentsDTO(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEstablishmentsDTO(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetEstablishmentsDTOReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetEstablishmentsDTOReturn>;
        }));
    }

    protected processGetEstablishmentsDTO(response: HttpResponseBase): Observable<GetEstablishmentsDTOReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetEstablishmentsDTOReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ItemClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getItems(command: GetItemsCommand): Observable<GetItemsIdReturn> {
        let url_ = this.baseUrl + "/api/establishment/item/get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetItems(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetItemsIdReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetItemsIdReturn>;
        }));
    }

    protected processGetItems(response: HttpResponseBase): Observable<GetItemsIdReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetItemsIdReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getItemsDTO(command: GetItemsCommand): Observable<GetItemsDTOReturn> {
        let url_ = this.baseUrl + "/api/establishment/item/get-DTO";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetItemsDTO(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetItemsDTO(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetItemsDTOReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetItemsDTOReturn>;
        }));
    }

    protected processGetItemsDTO(response: HttpResponseBase): Observable<GetItemsDTOReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetItemsDTOReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class SaleClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getSales(command: GetSalesCommand): Observable<GetSalesReturn> {
        let url_ = this.baseUrl + "/api/establishment/sales/get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSales(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSales(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetSalesReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetSalesReturn>;
        }));
    }

    protected processGetSales(response: HttpResponseBase): Observable<GetSalesReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetSalesReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSalesDTO(command: GetSalesCommand): Observable<GetSalesDTOReturn> {
        let url_ = this.baseUrl + "/api/establishment/sales/get-DTO";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSalesDTO(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSalesDTO(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetSalesDTOReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetSalesDTOReturn>;
        }));
    }

    protected processGetSalesDTO(response: HttpResponseBase): Observable<GetSalesDTOReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetSalesDTOReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    saleStaticstics(command: GetSalesStatisticsCommand): Observable<GetSalesStatisticsReturn> {
        let url_ = this.baseUrl + "/api/establishment/sales/statistics";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaleStaticstics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaleStaticstics(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetSalesStatisticsReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetSalesStatisticsReturn>;
        }));
    }

    protected processSaleStaticstics(response: HttpResponseBase): Observable<GetSalesStatisticsReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetSalesStatisticsReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class TableClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getTables(command: GetTablesCommand): Observable<GetTablesIdReturn> {
        let url_ = this.baseUrl + "/api/establishment/tables/get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTables(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTables(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetTablesIdReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetTablesIdReturn>;
        }));
    }

    protected processGetTables(response: HttpResponseBase): Observable<GetTablesIdReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTablesIdReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getTablesDTO(command: GetTablesCommand): Observable<GetTablesDTOReturn> {
        let url_ = this.baseUrl + "/api/establishment/tables/get-DTO";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTablesDTO(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTablesDTO(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetTablesDTOReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetTablesDTOReturn>;
        }));
    }

    protected processGetTablesDTO(response: HttpResponseBase): Observable<GetTablesDTOReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTablesDTOReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export abstract class ReturnBase implements IReturnBase {

    constructor(data?: IReturnBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ReturnBase {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ReturnBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IReturnBase {
}

export class CorrelationReturn extends ReturnBase implements ICorrelationReturn {
    lagAndCorrelation!: ValueTupleOfIntegerAndDouble[];
    calculationValues!: ValueTupleOfDateTimeAndListOfNullableDouble[];

    constructor(data?: ICorrelationReturn) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["lagAndCorrelation"])) {
                this.lagAndCorrelation = [] as any;
                for (let item of _data["lagAndCorrelation"])
                    this.lagAndCorrelation!.push(ValueTupleOfIntegerAndDouble.fromJS(item));
            }
            if (Array.isArray(_data["calculationValues"])) {
                this.calculationValues = [] as any;
                for (let item of _data["calculationValues"])
                    this.calculationValues!.push(ValueTupleOfDateTimeAndListOfNullableDouble.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): CorrelationReturn {
        data = typeof data === 'object' ? data : {};
        let result = new CorrelationReturn();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.lagAndCorrelation)) {
            data["lagAndCorrelation"] = [];
            for (let item of this.lagAndCorrelation)
                data["lagAndCorrelation"].push(item.toJSON());
        }
        if (Array.isArray(this.calculationValues)) {
            data["calculationValues"] = [];
            for (let item of this.calculationValues)
                data["calculationValues"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ICorrelationReturn extends IReturnBase {
    lagAndCorrelation: ValueTupleOfIntegerAndDouble[];
    calculationValues: ValueTupleOfDateTimeAndListOfNullableDouble[];
}

export class ValueTupleOfIntegerAndDouble implements IValueTupleOfIntegerAndDouble {
    item1!: number;
    item2!: number;

    constructor(data?: IValueTupleOfIntegerAndDouble) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"];
            this.item2 = _data["item2"];
        }
    }

    static fromJS(data: any): ValueTupleOfIntegerAndDouble {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTupleOfIntegerAndDouble();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2;
        return data;
    }
}

export interface IValueTupleOfIntegerAndDouble {
    item1: number;
    item2: number;
}

export class ValueTupleOfDateTimeAndListOfNullableDouble implements IValueTupleOfDateTimeAndListOfNullableDouble {
    item1!: Date;
    item2!: (number | undefined)[] | undefined;

    constructor(data?: IValueTupleOfDateTimeAndListOfNullableDouble) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"] ? new Date(_data["item1"].toString()) : <any>undefined;
            if (Array.isArray(_data["item2"])) {
                this.item2 = [] as any;
                for (let item of _data["item2"])
                    this.item2!.push(item);
            }
        }
    }

    static fromJS(data: any): ValueTupleOfDateTimeAndListOfNullableDouble {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTupleOfDateTimeAndListOfNullableDouble();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toISOString() : <any>undefined;
        if (Array.isArray(this.item2)) {
            data["item2"] = [];
            for (let item of this.item2)
                data["item2"].push(item);
        }
        return data;
    }
}

export interface IValueTupleOfDateTimeAndListOfNullableDouble {
    item1: Date;
    item2: (number | undefined)[] | undefined;
}

export abstract class CommandBase implements ICommandBase {

    constructor(data?: ICommandBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): CommandBase {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'CommandBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ICommandBase {
}

export class CorrelationCommand extends CommandBase implements ICorrelationCommand {
    establishmentId!: string;
    salesIds!: string[];
    timePeriod!: DateTimePeriod;
    coordinates!: Coordinates;
    timeResolution!: TimeResolution;
    upperLag!: number;
    lowerLag!: number;

    constructor(data?: ICorrelationCommand) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.establishmentId = _data["establishmentId"];
            if (Array.isArray(_data["salesIds"])) {
                this.salesIds = [] as any;
                for (let item of _data["salesIds"])
                    this.salesIds!.push(item);
            }
            this.timePeriod = _data["timePeriod"] ? DateTimePeriod.fromJS(_data["timePeriod"]) : <any>undefined;
            this.coordinates = _data["coordinates"] ? Coordinates.fromJS(_data["coordinates"]) : <any>undefined;
            this.timeResolution = _data["timeResolution"];
            this.upperLag = _data["upperLag"];
            this.lowerLag = _data["lowerLag"];
        }
    }

    static override fromJS(data: any): CorrelationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CorrelationCommand();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["establishmentId"] = this.establishmentId;
        if (Array.isArray(this.salesIds)) {
            data["salesIds"] = [];
            for (let item of this.salesIds)
                data["salesIds"].push(item);
        }
        data["timePeriod"] = this.timePeriod ? this.timePeriod.toJSON() : <any>undefined;
        data["coordinates"] = this.coordinates ? this.coordinates.toJSON() : <any>undefined;
        data["timeResolution"] = this.timeResolution;
        data["upperLag"] = this.upperLag;
        data["lowerLag"] = this.lowerLag;
        super.toJSON(data);
        return data;
    }
}

export interface ICorrelationCommand extends ICommandBase {
    establishmentId: string;
    salesIds: string[];
    timePeriod: DateTimePeriod;
    coordinates: Coordinates;
    timeResolution: TimeResolution;
    upperLag: number;
    lowerLag: number;
}

export class DateTimePeriod implements IDateTimePeriod {
    start!: Date;
    end!: Date;

    constructor(data?: IDateTimePeriod) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.start = _data["start"] ? new Date(_data["start"].toString()) : <any>undefined;
            this.end = _data["end"] ? new Date(_data["end"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DateTimePeriod {
        data = typeof data === 'object' ? data : {};
        let result = new DateTimePeriod();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["start"] = this.start ? this.start.toISOString() : <any>undefined;
        data["end"] = this.end ? this.end.toISOString() : <any>undefined;
        return data;
    }
}

export interface IDateTimePeriod {
    start: Date;
    end: Date;
}

export class Coordinates implements ICoordinates {
    latitude!: number;
    longitude!: number;

    constructor(data?: ICoordinates) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }

    static fromJS(data: any): Coordinates {
        data = typeof data === 'object' ? data : {};
        let result = new Coordinates();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data;
    }
}

export interface ICoordinates {
    latitude: number;
    longitude: number;
}

export enum TimeResolution {
    Hour = 0,
    Date = 1,
    Month = 2,
    Year = 3,
}

export class ClusteringReturn extends ReturnBase implements IClusteringReturn {
    clusters!: string[][];
    calculationValues!: ValueTupleOfGuidAndListOfDouble[];

    constructor(data?: IClusteringReturn) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["clusters"])) {
                this.clusters = [] as any;
                for (let item of _data["clusters"])
                    this.clusters!.push(item);
            }
            if (Array.isArray(_data["calculationValues"])) {
                this.calculationValues = [] as any;
                for (let item of _data["calculationValues"])
                    this.calculationValues!.push(ValueTupleOfGuidAndListOfDouble.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): ClusteringReturn {
        data = typeof data === 'object' ? data : {};
        let result = new ClusteringReturn();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.clusters)) {
            data["clusters"] = [];
            for (let item of this.clusters)
                data["clusters"].push(item);
        }
        if (Array.isArray(this.calculationValues)) {
            data["calculationValues"] = [];
            for (let item of this.calculationValues)
                data["calculationValues"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IClusteringReturn extends IReturnBase {
    clusters: string[][];
    calculationValues: ValueTupleOfGuidAndListOfDouble[];
}

export class ValueTupleOfGuidAndListOfDouble implements IValueTupleOfGuidAndListOfDouble {
    item1!: string;
    item2!: number[] | undefined;

    constructor(data?: IValueTupleOfGuidAndListOfDouble) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"];
            if (Array.isArray(_data["item2"])) {
                this.item2 = [] as any;
                for (let item of _data["item2"])
                    this.item2!.push(item);
            }
        }
    }

    static fromJS(data: any): ValueTupleOfGuidAndListOfDouble {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTupleOfGuidAndListOfDouble();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        if (Array.isArray(this.item2)) {
            data["item2"] = [];
            for (let item of this.item2)
                data["item2"].push(item);
        }
        return data;
    }
}

export interface IValueTupleOfGuidAndListOfDouble {
    item1: string;
    item2: number[] | undefined;
}

export abstract class ClusteringCommand extends CommandBase implements IClusteringCommand {
    establishmentId!: string;
    salesIds!: string[];

    constructor(data?: IClusteringCommand) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.establishmentId = _data["establishmentId"];
            if (Array.isArray(_data["salesIds"])) {
                this.salesIds = [] as any;
                for (let item of _data["salesIds"])
                    this.salesIds!.push(item);
            }
        }
    }

    static override fromJS(data: any): ClusteringCommand {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ClusteringCommand' cannot be instantiated.");
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["establishmentId"] = this.establishmentId;
        if (Array.isArray(this.salesIds)) {
            data["salesIds"] = [];
            for (let item of this.salesIds)
                data["salesIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IClusteringCommand extends ICommandBase {
    establishmentId: string;
    salesIds: string[];
}

export class LoginCommand implements ILoginCommand {
    username!: string;
    password!: string;

    constructor(data?: ILoginCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginCommand {
        data = typeof data === 'object' ? data : {};
        let result = new LoginCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginCommand {
    username: string;
    password: string;
}

export class IsLoggedInReturn implements IIsLoggedInReturn {
    isLoggedIn!: boolean;

    constructor(data?: IIsLoggedInReturn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isLoggedIn = _data["isLoggedIn"];
        }
    }

    static fromJS(data: any): IsLoggedInReturn {
        data = typeof data === 'object' ? data : {};
        let result = new IsLoggedInReturn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isLoggedIn"] = this.isLoggedIn;
        return data;
    }
}

export interface IIsLoggedInReturn {
    isLoggedIn: boolean;
}

export class GetEstablishmentsIdReturn extends ReturnBase implements IGetEstablishmentsIdReturn {
    ids!: string[];

    constructor(data?: IGetEstablishmentsIdReturn) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids!.push(item);
            }
        }
    }

    static override fromJS(data: any): GetEstablishmentsIdReturn {
        data = typeof data === 'object' ? data : {};
        let result = new GetEstablishmentsIdReturn();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGetEstablishmentsIdReturn extends IReturnBase {
    ids: string[];
}

export class GetEstablishmentsCommand extends CommandBase implements IGetEstablishmentsCommand {
    establishmentIds!: string[];

    constructor(data?: IGetEstablishmentsCommand) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["establishmentIds"])) {
                this.establishmentIds = [] as any;
                for (let item of _data["establishmentIds"])
                    this.establishmentIds!.push(item);
            }
        }
    }

    static override fromJS(data: any): GetEstablishmentsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new GetEstablishmentsCommand();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.establishmentIds)) {
            data["establishmentIds"] = [];
            for (let item of this.establishmentIds)
                data["establishmentIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGetEstablishmentsCommand extends ICommandBase {
    establishmentIds: string[];
}

export class GetEstablishmentsDTOReturn extends ReturnBase implements IGetEstablishmentsDTOReturn {
    dtos!: EstablishmentDTO[];

    constructor(data?: IGetEstablishmentsDTOReturn) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["dtos"])) {
                this.dtos = [] as any;
                for (let item of _data["dtos"])
                    this.dtos!.push(EstablishmentDTO.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): GetEstablishmentsDTOReturn {
        data = typeof data === 'object' ? data : {};
        let result = new GetEstablishmentsDTOReturn();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dtos)) {
            data["dtos"] = [];
            for (let item of this.dtos)
                data["dtos"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGetEstablishmentsDTOReturn extends IReturnBase {
    dtos: EstablishmentDTO[];
}

export class EstablishmentDTO implements IEstablishmentDTO {
    id!: string;
    name!: string;
    items!: string[];
    tables!: string[];
    sales!: string[];

    constructor(data?: IEstablishmentDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(item);
            }
            if (Array.isArray(_data["tables"])) {
                this.tables = [] as any;
                for (let item of _data["tables"])
                    this.tables!.push(item);
            }
            if (Array.isArray(_data["sales"])) {
                this.sales = [] as any;
                for (let item of _data["sales"])
                    this.sales!.push(item);
            }
        }
    }

    static fromJS(data: any): EstablishmentDTO {
        data = typeof data === 'object' ? data : {};
        let result = new EstablishmentDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item);
        }
        if (Array.isArray(this.tables)) {
            data["tables"] = [];
            for (let item of this.tables)
                data["tables"].push(item);
        }
        if (Array.isArray(this.sales)) {
            data["sales"] = [];
            for (let item of this.sales)
                data["sales"].push(item);
        }
        return data;
    }
}

export interface IEstablishmentDTO {
    id: string;
    name: string;
    items: string[];
    tables: string[];
    sales: string[];
}

export class GetItemsIdReturn extends ReturnBase implements IGetItemsIdReturn {
    id!: string[];

    constructor(data?: IGetItemsIdReturn) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["id"])) {
                this.id = [] as any;
                for (let item of _data["id"])
                    this.id!.push(item);
            }
        }
    }

    static override fromJS(data: any): GetItemsIdReturn {
        data = typeof data === 'object' ? data : {};
        let result = new GetItemsIdReturn();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.id)) {
            data["id"] = [];
            for (let item of this.id)
                data["id"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGetItemsIdReturn extends IReturnBase {
    id: string[];
}

export class GetItemsCommand extends CommandBase implements IGetItemsCommand {
    establishmentId!: string;
    itemIds!: string[];

    constructor(data?: IGetItemsCommand) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.establishmentId = _data["establishmentId"];
            if (Array.isArray(_data["itemIds"])) {
                this.itemIds = [] as any;
                for (let item of _data["itemIds"])
                    this.itemIds!.push(item);
            }
        }
    }

    static override fromJS(data: any): GetItemsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new GetItemsCommand();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["establishmentId"] = this.establishmentId;
        if (Array.isArray(this.itemIds)) {
            data["itemIds"] = [];
            for (let item of this.itemIds)
                data["itemIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGetItemsCommand extends ICommandBase {
    establishmentId: string;
    itemIds: string[];
}

export class GetItemsDTOReturn extends ReturnBase implements IGetItemsDTOReturn {
    dto!: ItemDTO[];

    constructor(data?: IGetItemsDTOReturn) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["dto"])) {
                this.dto = [] as any;
                for (let item of _data["dto"])
                    this.dto!.push(ItemDTO.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): GetItemsDTOReturn {
        data = typeof data === 'object' ? data : {};
        let result = new GetItemsDTOReturn();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dto)) {
            data["dto"] = [];
            for (let item of this.dto)
                data["dto"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGetItemsDTOReturn extends IReturnBase {
    dto: ItemDTO[];
}

export class ItemDTO implements IItemDTO {
    id!: string;
    name!: string;
    price!: number;

    constructor(data?: IItemDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): ItemDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ItemDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["price"] = this.price;
        return data;
    }
}

export interface IItemDTO {
    id: string;
    name: string;
    price: number;
}

export class GetSalesReturn extends ReturnBase implements IGetSalesReturn {
    sales!: string[];

    constructor(data?: IGetSalesReturn) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["sales"])) {
                this.sales = [] as any;
                for (let item of _data["sales"])
                    this.sales!.push(item);
            }
        }
    }

    static override fromJS(data: any): GetSalesReturn {
        data = typeof data === 'object' ? data : {};
        let result = new GetSalesReturn();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sales)) {
            data["sales"] = [];
            for (let item of this.sales)
                data["sales"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGetSalesReturn extends IReturnBase {
    sales: string[];
}

export class GetSalesCommand extends CommandBase implements IGetSalesCommand {
    establishmentId!: string;
    salesIds!: string[] | undefined;
    filterSales!: FilterSales | undefined;
    filterSalesBySalesItems!: FilterSalesBySalesItems | undefined;
    filterSalesBySalesTables!: FilterSalesBySalesTables | undefined;

    constructor(data?: IGetSalesCommand) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.establishmentId = _data["establishmentId"];
            if (Array.isArray(_data["salesIds"])) {
                this.salesIds = [] as any;
                for (let item of _data["salesIds"])
                    this.salesIds!.push(item);
            }
            this.filterSales = _data["filterSales"] ? FilterSales.fromJS(_data["filterSales"]) : <any>undefined;
            this.filterSalesBySalesItems = _data["filterSalesBySalesItems"] ? FilterSalesBySalesItems.fromJS(_data["filterSalesBySalesItems"]) : <any>undefined;
            this.filterSalesBySalesTables = _data["filterSalesBySalesTables"] ? FilterSalesBySalesTables.fromJS(_data["filterSalesBySalesTables"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): GetSalesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new GetSalesCommand();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["establishmentId"] = this.establishmentId;
        if (Array.isArray(this.salesIds)) {
            data["salesIds"] = [];
            for (let item of this.salesIds)
                data["salesIds"].push(item);
        }
        data["filterSales"] = this.filterSales ? this.filterSales.toJSON() : <any>undefined;
        data["filterSalesBySalesItems"] = this.filterSalesBySalesItems ? this.filterSalesBySalesItems.toJSON() : <any>undefined;
        data["filterSalesBySalesTables"] = this.filterSalesBySalesTables ? this.filterSalesBySalesTables.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IGetSalesCommand extends ICommandBase {
    establishmentId: string;
    salesIds: string[] | undefined;
    filterSales: FilterSales | undefined;
    filterSalesBySalesItems: FilterSalesBySalesItems | undefined;
    filterSalesBySalesTables: FilterSalesBySalesTables | undefined;
}

export class FilterSales implements IFilterSales {
    arrivalTimeframe!: ValueTupleOfDateTimeAndDateTime[] | undefined;
    paymentTimeframe!: ValueTupleOfDateTimeAndDateTime[] | undefined;
    mustContainAllAttributes!: SaleAttributes[] | undefined;

    constructor(data?: IFilterSales) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["arrivalTimeframe"])) {
                this.arrivalTimeframe = [] as any;
                for (let item of _data["arrivalTimeframe"])
                    this.arrivalTimeframe!.push(ValueTupleOfDateTimeAndDateTime.fromJS(item));
            }
            if (Array.isArray(_data["paymentTimeframe"])) {
                this.paymentTimeframe = [] as any;
                for (let item of _data["paymentTimeframe"])
                    this.paymentTimeframe!.push(ValueTupleOfDateTimeAndDateTime.fromJS(item));
            }
            if (Array.isArray(_data["mustContainAllAttributes"])) {
                this.mustContainAllAttributes = [] as any;
                for (let item of _data["mustContainAllAttributes"])
                    this.mustContainAllAttributes!.push(item);
            }
        }
    }

    static fromJS(data: any): FilterSales {
        data = typeof data === 'object' ? data : {};
        let result = new FilterSales();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.arrivalTimeframe)) {
            data["arrivalTimeframe"] = [];
            for (let item of this.arrivalTimeframe)
                data["arrivalTimeframe"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentTimeframe)) {
            data["paymentTimeframe"] = [];
            for (let item of this.paymentTimeframe)
                data["paymentTimeframe"].push(item.toJSON());
        }
        if (Array.isArray(this.mustContainAllAttributes)) {
            data["mustContainAllAttributes"] = [];
            for (let item of this.mustContainAllAttributes)
                data["mustContainAllAttributes"].push(item);
        }
        return data;
    }
}

export interface IFilterSales {
    arrivalTimeframe: ValueTupleOfDateTimeAndDateTime[] | undefined;
    paymentTimeframe: ValueTupleOfDateTimeAndDateTime[] | undefined;
    mustContainAllAttributes: SaleAttributes[] | undefined;
}

export class ValueTupleOfDateTimeAndDateTime implements IValueTupleOfDateTimeAndDateTime {
    item1!: Date;
    item2!: Date;

    constructor(data?: IValueTupleOfDateTimeAndDateTime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"] ? new Date(_data["item1"].toString()) : <any>undefined;
            this.item2 = _data["item2"] ? new Date(_data["item2"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ValueTupleOfDateTimeAndDateTime {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTupleOfDateTimeAndDateTime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toISOString() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toISOString() : <any>undefined;
        return data;
    }
}

export interface IValueTupleOfDateTimeAndDateTime {
    item1: Date;
    item2: Date;
}

export enum SaleAttributes {
    Tables = 0,
    Items = 1,
    TimestampArrival = 2,
    TimestampPayment = 3,
}

export class FilterSalesBySalesItems implements IFilterSalesBySalesItems {
    any!: string[] | undefined;
    excatly!: string[] | undefined;
    all!: string[] | undefined;

    constructor(data?: IFilterSalesBySalesItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["any"])) {
                this.any = [] as any;
                for (let item of _data["any"])
                    this.any!.push(item);
            }
            if (Array.isArray(_data["excatly"])) {
                this.excatly = [] as any;
                for (let item of _data["excatly"])
                    this.excatly!.push(item);
            }
            if (Array.isArray(_data["all"])) {
                this.all = [] as any;
                for (let item of _data["all"])
                    this.all!.push(item);
            }
        }
    }

    static fromJS(data: any): FilterSalesBySalesItems {
        data = typeof data === 'object' ? data : {};
        let result = new FilterSalesBySalesItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.any)) {
            data["any"] = [];
            for (let item of this.any)
                data["any"].push(item);
        }
        if (Array.isArray(this.excatly)) {
            data["excatly"] = [];
            for (let item of this.excatly)
                data["excatly"].push(item);
        }
        if (Array.isArray(this.all)) {
            data["all"] = [];
            for (let item of this.all)
                data["all"].push(item);
        }
        return data;
    }
}

export interface IFilterSalesBySalesItems {
    any: string[] | undefined;
    excatly: string[] | undefined;
    all: string[] | undefined;
}

export class FilterSalesBySalesTables implements IFilterSalesBySalesTables {
    any!: string[] | undefined;
    excatly!: string[] | undefined;
    all!: string[] | undefined;

    constructor(data?: IFilterSalesBySalesTables) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["any"])) {
                this.any = [] as any;
                for (let item of _data["any"])
                    this.any!.push(item);
            }
            if (Array.isArray(_data["excatly"])) {
                this.excatly = [] as any;
                for (let item of _data["excatly"])
                    this.excatly!.push(item);
            }
            if (Array.isArray(_data["all"])) {
                this.all = [] as any;
                for (let item of _data["all"])
                    this.all!.push(item);
            }
        }
    }

    static fromJS(data: any): FilterSalesBySalesTables {
        data = typeof data === 'object' ? data : {};
        let result = new FilterSalesBySalesTables();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.any)) {
            data["any"] = [];
            for (let item of this.any)
                data["any"].push(item);
        }
        if (Array.isArray(this.excatly)) {
            data["excatly"] = [];
            for (let item of this.excatly)
                data["excatly"].push(item);
        }
        if (Array.isArray(this.all)) {
            data["all"] = [];
            for (let item of this.all)
                data["all"].push(item);
        }
        return data;
    }
}

export interface IFilterSalesBySalesTables {
    any: string[] | undefined;
    excatly: string[] | undefined;
    all: string[] | undefined;
}

export class GetSalesDTOReturn extends ReturnBase implements IGetSalesDTOReturn {
    sales!: SaleDTO[];

    constructor(data?: IGetSalesDTOReturn) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["sales"])) {
                this.sales = [] as any;
                for (let item of _data["sales"])
                    this.sales!.push(SaleDTO.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): GetSalesDTOReturn {
        data = typeof data === 'object' ? data : {};
        let result = new GetSalesDTOReturn();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sales)) {
            data["sales"] = [];
            for (let item of this.sales)
                data["sales"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGetSalesDTOReturn extends IReturnBase {
    sales: SaleDTO[];
}

export class SaleDTO implements ISaleDTO {
    id!: string;
    timestampArrival!: Date | undefined;
    timestampPayment!: Date;
    salesItems!: ValueTupleOfGuidAndInteger[];
    salesTables!: string[];
    totalSpend!: number;

    constructor(data?: ISaleDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.timestampArrival = _data["timestampArrival"] ? new Date(_data["timestampArrival"].toString()) : <any>undefined;
            this.timestampPayment = _data["timestampPayment"] ? new Date(_data["timestampPayment"].toString()) : <any>undefined;
            if (Array.isArray(_data["salesItems"])) {
                this.salesItems = [] as any;
                for (let item of _data["salesItems"])
                    this.salesItems!.push(ValueTupleOfGuidAndInteger.fromJS(item));
            }
            if (Array.isArray(_data["salesTables"])) {
                this.salesTables = [] as any;
                for (let item of _data["salesTables"])
                    this.salesTables!.push(item);
            }
            this.totalSpend = _data["totalSpend"];
        }
    }

    static fromJS(data: any): SaleDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SaleDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["timestampArrival"] = this.timestampArrival ? this.timestampArrival.toISOString() : <any>undefined;
        data["timestampPayment"] = this.timestampPayment ? this.timestampPayment.toISOString() : <any>undefined;
        if (Array.isArray(this.salesItems)) {
            data["salesItems"] = [];
            for (let item of this.salesItems)
                data["salesItems"].push(item.toJSON());
        }
        if (Array.isArray(this.salesTables)) {
            data["salesTables"] = [];
            for (let item of this.salesTables)
                data["salesTables"].push(item);
        }
        data["totalSpend"] = this.totalSpend;
        return data;
    }
}

export interface ISaleDTO {
    id: string;
    timestampArrival: Date | undefined;
    timestampPayment: Date;
    salesItems: ValueTupleOfGuidAndInteger[];
    salesTables: string[];
    totalSpend: number;
}

export class ValueTupleOfGuidAndInteger implements IValueTupleOfGuidAndInteger {
    item1!: string;
    item2!: number;

    constructor(data?: IValueTupleOfGuidAndInteger) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"];
            this.item2 = _data["item2"];
        }
    }

    static fromJS(data: any): ValueTupleOfGuidAndInteger {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTupleOfGuidAndInteger();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2;
        return data;
    }
}

export interface IValueTupleOfGuidAndInteger {
    item1: string;
    item2: number;
}

export class GetSalesStatisticsReturn extends ReturnBase implements IGetSalesStatisticsReturn {
    metric!: number;

    constructor(data?: IGetSalesStatisticsReturn) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.metric = _data["metric"];
        }
    }

    static override fromJS(data: any): GetSalesStatisticsReturn {
        data = typeof data === 'object' ? data : {};
        let result = new GetSalesStatisticsReturn();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["metric"] = this.metric;
        super.toJSON(data);
        return data;
    }
}

export interface IGetSalesStatisticsReturn extends IReturnBase {
    metric: number;
}

export abstract class GetSalesStatisticsCommand implements IGetSalesStatisticsCommand {
    establishmentId!: string;
    salesIds!: string[];

    protected _discriminator: string;

    constructor(data?: IGetSalesStatisticsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "GetSalesStatisticsCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.establishmentId = _data["establishmentId"];
            if (Array.isArray(_data["salesIds"])) {
                this.salesIds = [] as any;
                for (let item of _data["salesIds"])
                    this.salesIds!.push(item);
            }
        }
    }

    static fromJS(data: any): GetSalesStatisticsCommand {
        data = typeof data === 'object' ? data : {};
        if (data["$type"] === "GetSalesAverageSpend") {
            let result = new GetSalesAverageSpend();
            result.init(data);
            return result;
        }
        if (data["$type"] === "GetSalesAverageNumberOfItems") {
            let result = new GetSalesAverageNumberOfItems();
            result.init(data);
            return result;
        }
        if (data["$type"] === "GetSalesAverageTimeOfPayment") {
            let result = new GetSalesAverageTimeOfPayment();
            result.init(data);
            return result;
        }
        if (data["$type"] === "GetSalesAverageTimeOfArrival") {
            let result = new GetSalesAverageTimeOfArrival();
            result.init(data);
            return result;
        }
        if (data["$type"] === "GetSalesAverageSeatTime") {
            let result = new GetSalesAverageSeatTime();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'GetSalesStatisticsCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$type"] = this._discriminator;
        data["establishmentId"] = this.establishmentId;
        if (Array.isArray(this.salesIds)) {
            data["salesIds"] = [];
            for (let item of this.salesIds)
                data["salesIds"].push(item);
        }
        return data;
    }
}

export interface IGetSalesStatisticsCommand {
    establishmentId: string;
    salesIds: string[];
}

export class GetSalesAverageSpend extends GetSalesStatisticsCommand implements IGetSalesAverageSpend {

    constructor(data?: IGetSalesAverageSpend) {
        super(data);
        this._discriminator = "GetSalesAverageSpend";
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetSalesAverageSpend {
        data = typeof data === 'object' ? data : {};
        let result = new GetSalesAverageSpend();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetSalesAverageSpend extends IGetSalesStatisticsCommand {
}

export class GetSalesAverageNumberOfItems extends GetSalesStatisticsCommand implements IGetSalesAverageNumberOfItems {

    constructor(data?: IGetSalesAverageNumberOfItems) {
        super(data);
        this._discriminator = "GetSalesAverageNumberOfItems";
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetSalesAverageNumberOfItems {
        data = typeof data === 'object' ? data : {};
        let result = new GetSalesAverageNumberOfItems();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetSalesAverageNumberOfItems extends IGetSalesStatisticsCommand {
}

export class GetSalesAverageTimeOfPayment extends GetSalesStatisticsCommand implements IGetSalesAverageTimeOfPayment {

    constructor(data?: IGetSalesAverageTimeOfPayment) {
        super(data);
        this._discriminator = "GetSalesAverageTimeOfPayment";
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetSalesAverageTimeOfPayment {
        data = typeof data === 'object' ? data : {};
        let result = new GetSalesAverageTimeOfPayment();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetSalesAverageTimeOfPayment extends IGetSalesStatisticsCommand {
}

export class GetSalesAverageTimeOfArrival extends GetSalesStatisticsCommand implements IGetSalesAverageTimeOfArrival {

    constructor(data?: IGetSalesAverageTimeOfArrival) {
        super(data);
        this._discriminator = "GetSalesAverageTimeOfArrival";
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetSalesAverageTimeOfArrival {
        data = typeof data === 'object' ? data : {};
        let result = new GetSalesAverageTimeOfArrival();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetSalesAverageTimeOfArrival extends IGetSalesStatisticsCommand {
}

export class GetSalesAverageSeatTime extends GetSalesStatisticsCommand implements IGetSalesAverageSeatTime {

    constructor(data?: IGetSalesAverageSeatTime) {
        super(data);
        this._discriminator = "GetSalesAverageSeatTime";
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetSalesAverageSeatTime {
        data = typeof data === 'object' ? data : {};
        let result = new GetSalesAverageSeatTime();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetSalesAverageSeatTime extends IGetSalesStatisticsCommand {
}

export class GetTablesIdReturn extends ReturnBase implements IGetTablesIdReturn {
    tables!: string[];

    constructor(data?: IGetTablesIdReturn) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["tables"])) {
                this.tables = [] as any;
                for (let item of _data["tables"])
                    this.tables!.push(item);
            }
        }
    }

    static override fromJS(data: any): GetTablesIdReturn {
        data = typeof data === 'object' ? data : {};
        let result = new GetTablesIdReturn();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.tables)) {
            data["tables"] = [];
            for (let item of this.tables)
                data["tables"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGetTablesIdReturn extends IReturnBase {
    tables: string[];
}

export class GetTablesCommand extends CommandBase implements IGetTablesCommand {
    establishmentId!: string;
    tablesIds!: string[] | undefined;

    constructor(data?: IGetTablesCommand) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.establishmentId = _data["establishmentId"];
            if (Array.isArray(_data["tablesIds"])) {
                this.tablesIds = [] as any;
                for (let item of _data["tablesIds"])
                    this.tablesIds!.push(item);
            }
        }
    }

    static override fromJS(data: any): GetTablesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new GetTablesCommand();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["establishmentId"] = this.establishmentId;
        if (Array.isArray(this.tablesIds)) {
            data["tablesIds"] = [];
            for (let item of this.tablesIds)
                data["tablesIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGetTablesCommand extends ICommandBase {
    establishmentId: string;
    tablesIds: string[] | undefined;
}

export class GetTablesDTOReturn extends ReturnBase implements IGetTablesDTOReturn {
    tables!: TableDTO[];

    constructor(data?: IGetTablesDTOReturn) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["tables"])) {
                this.tables = [] as any;
                for (let item of _data["tables"])
                    this.tables!.push(TableDTO.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): GetTablesDTOReturn {
        data = typeof data === 'object' ? data : {};
        let result = new GetTablesDTOReturn();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.tables)) {
            data["tables"] = [];
            for (let item of this.tables)
                data["tables"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGetTablesDTOReturn extends IReturnBase {
    tables: TableDTO[];
}

export class TableDTO implements ITableDTO {
    id!: string;
    name!: string;

    constructor(data?: ITableDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): TableDTO {
        data = typeof data === 'object' ? data : {};
        let result = new TableDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface ITableDTO {
    id: string;
    name: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}