//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class UserContextClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAccessibleEstablishments(): Observable<Establishment[]> {
        let url_ = this.baseUrl + "/api/user-context/get-accessible-establishment";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAccessibleEstablishments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAccessibleEstablishments(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Establishment[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Establishment[]>;
        }));
    }

    protected processGetAccessibleEstablishments(response: HttpResponseBase): Observable<Establishment[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Establishment.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getActiveEstablishment(): Observable<Establishment> {
        let url_ = this.baseUrl + "/api/user-context/get-active-establishment";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetActiveEstablishment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetActiveEstablishment(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Establishment>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Establishment>;
        }));
    }

    protected processGetActiveEstablishment(response: HttpResponseBase): Observable<Establishment> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Establishment.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class WeatherClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getWeatherTemperature(): Observable<Establishment[]> {
        let url_ = this.baseUrl + "/api/user-context/get-temperature";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWeatherTemperature(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWeatherTemperature(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Establishment[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Establishment[]>;
        }));
    }

    protected processGetWeatherTemperature(response: HttpResponseBase): Observable<Establishment[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Establishment.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class AnalysisClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    sales(command: SalesQuery): Observable<SalesQueryReturn> {
        let url_ = this.baseUrl + "/api/analysis/sales";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSales(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSales(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SalesQueryReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SalesQueryReturn>;
        }));
    }

    protected processSales(response: HttpResponseBase): Observable<SalesQueryReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SalesQueryReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    meanSales(command: SalesMeanOverTime): Observable<SalesMeanQueryReturn> {
        let url_ = this.baseUrl + "/api/analysis/average-visits";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMeanSales(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMeanSales(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SalesMeanQueryReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SalesMeanQueryReturn>;
        }));
    }

    protected processMeanSales(response: HttpResponseBase): Observable<SalesMeanQueryReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SalesMeanQueryReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    meanSalesAverageSpend(command: SalesMeanOverTime): Observable<SalesMeanQueryReturn> {
        let url_ = this.baseUrl + "/api/analysis/average-spend";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMeanSalesAverageSpend(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMeanSalesAverageSpend(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SalesMeanQueryReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SalesMeanQueryReturn>;
        }));
    }

    protected processMeanSalesAverageSpend(response: HttpResponseBase): Observable<SalesMeanQueryReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SalesMeanQueryReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    correlationCoefficientAndLag(): Observable<CorrelationReturn> {
        let url_ = this.baseUrl + "/api/analysis/cross-correlation-with-weather";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCorrelationCoefficientAndLag(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCorrelationCoefficientAndLag(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CorrelationReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CorrelationReturn>;
        }));
    }

    protected processCorrelationCoefficientAndLag(response: HttpResponseBase): Observable<CorrelationReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CorrelationReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    meanShiftClustering(command: MeanShiftClusteringCommand): Observable<MeanShiftClusteringReturn> {
        let url_ = this.baseUrl + "/api/analysis/clustering";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMeanShiftClustering(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMeanShiftClustering(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MeanShiftClusteringReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MeanShiftClusteringReturn>;
        }));
    }

    protected processMeanShiftClustering(response: HttpResponseBase): Observable<MeanShiftClusteringReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MeanShiftClusteringReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    meanShiftClustering2(command: MeanShiftClusteringCommand): Observable<MeanShiftClusteringReturn> {
        let url_ = this.baseUrl + "/api/analysis/mean-shift-clustering";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMeanShiftClustering2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMeanShiftClustering2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MeanShiftClusteringReturn>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MeanShiftClusteringReturn>;
        }));
    }

    protected processMeanShiftClustering2(response: HttpResponseBase): Observable<MeanShiftClusteringReturn> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MeanShiftClusteringReturn.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class AuthenticationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    logIn(loginCommand: LoginCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/authentication/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(loginCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogIn(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogIn(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processLogIn(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    logOut(): Observable<void> {
        let url_ = this.baseUrl + "/api/authentication/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogOut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogOut(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processLogOut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    isLoggedIn(): Observable<boolean> {
        let url_ = this.baseUrl + "/api/authentication/is-logged-in";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIsLoggedIn(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsLoggedIn(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processIsLoggedIn(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getLoggedInUser(): Observable<User> {
        let url_ = this.baseUrl + "/api/authentication/get-logged-in-user";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLoggedInUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLoggedInUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<User>;
                }
            } else
                return _observableThrow(response_) as any as Observable<User>;
        }));
    }

    protected processGetLoggedInUser(response: HttpResponseBase): Observable<User> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class DataSeedClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    lol(factory: FactoryServiceBuilder): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/test/lol";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(factory);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLol(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLol(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processLol(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    seedDatabase(): Observable<void> {
        let url_ = this.baseUrl + "/api/test";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSeedDatabase(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSeedDatabase(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSeedDatabase(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class EstablishmentClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    get(establishmentId: string | undefined): Observable<Establishment> {
        let url_ = this.baseUrl + "/api/establishment/get?";
        if (establishmentId === null)
            throw new Error("The parameter 'establishmentId' cannot be null.");
        else if (establishmentId !== undefined)
            url_ += "establishmentId=" + encodeURIComponent("" + establishmentId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Establishment>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Establishment>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<Establishment> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Establishment.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAll(): Observable<Establishment[] | null> {
        let url_ = this.baseUrl + "/api/establishment/get-all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Establishment[] | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Establishment[] | null>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<Establishment[] | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Establishment.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    itemGetAll(): Observable<Item[]> {
        let url_ = this.baseUrl + "/api/establishment/items/get-all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processItemGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processItemGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Item[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Item[]>;
        }));
    }

    protected processItemGetAll(response: HttpResponseBase): Observable<Item[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Item.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export abstract class EntityBase {
    id!: string;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EntityBase {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'EntityBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export class Establishment extends EntityBase {
    name!: string | undefined;
    information!: Information | undefined;
    items!: Item[];
    tables!: Table[];
    sales!: Sale[];

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.information = _data["information"] ? Information.fromJS(_data["information"]) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Item.fromJS(item));
            }
            if (Array.isArray(_data["tables"])) {
                this.tables = [] as any;
                for (let item of _data["tables"])
                    this.tables!.push(Table.fromJS(item));
            }
            if (Array.isArray(_data["sales"])) {
                this.sales = [] as any;
                for (let item of _data["sales"])
                    this.sales!.push(Sale.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Establishment {
        data = typeof data === 'object' ? data : {};
        let result = new Establishment();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["information"] = this.information ? this.information.toJSON() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        if (Array.isArray(this.tables)) {
            data["tables"] = [];
            for (let item of this.tables)
                data["tables"].push(item.toJSON());
        }
        if (Array.isArray(this.sales)) {
            data["sales"] = [];
            for (let item of this.sales)
                data["sales"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class Information extends EntityBase {
    location!: Location | undefined;
    openingHours!: OpeningHours[];

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.location = _data["location"] ? Location.fromJS(_data["location"]) : <any>undefined;
            if (Array.isArray(_data["openingHours"])) {
                this.openingHours = [] as any;
                for (let item of _data["openingHours"])
                    this.openingHours!.push(OpeningHours.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Information {
        data = typeof data === 'object' ? data : {};
        let result = new Information();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        if (Array.isArray(this.openingHours)) {
            data["openingHours"] = [];
            for (let item of this.openingHours)
                data["openingHours"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class Location extends EntityBase {
    coordinates!: Coordinates;

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.coordinates = _data["coordinates"] ? Coordinates.fromJS(_data["coordinates"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Location {
        data = typeof data === 'object' ? data : {};
        let result = new Location();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["coordinates"] = this.coordinates ? this.coordinates.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export class Coordinates {
    latitude!: number;
    longitude!: number;

    init(_data?: any) {
        if (_data) {
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }

    static fromJS(data: any): Coordinates {
        data = typeof data === 'object' ? data : {};
        let result = new Coordinates();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data;
    }
}

export class OpeningHours extends EntityBase {
    dayOfWeek!: DayOfWeek;
    open!: string;
    close!: string;

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dayOfWeek = _data["dayOfWeek"];
            this.open = _data["open"];
            this.close = _data["close"];
        }
    }

    static override fromJS(data: any): OpeningHours {
        data = typeof data === 'object' ? data : {};
        let result = new OpeningHours();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dayOfWeek"] = this.dayOfWeek;
        data["open"] = this.open;
        data["close"] = this.close;
        super.toJSON(data);
        return data;
    }
}

export enum DayOfWeek {
    Sunday = 0,
    Monday = 1,
    Tuesday = 2,
    Wednesday = 3,
    Thursday = 4,
    Friday = 5,
    Saturday = 6,
}

export class Item extends EntityBase {
    name!: string;
    price!: number;

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.price = _data["price"];
        }
    }

    static override fromJS(data: any): Item {
        data = typeof data === 'object' ? data : {};
        let result = new Item();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["price"] = this.price;
        super.toJSON(data);
        return data;
    }
}

export class Table extends EntityBase {
    name!: string;

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
        }
    }

    static override fromJS(data: any): Table {
        data = typeof data === 'object' ? data : {};
        let result = new Table();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        super.toJSON(data);
        return data;
    }
}

export class Sale extends EntityBase {
    establishment!: Establishment;
    timestampArrival!: Date | undefined;
    timestampPayment!: Date;
    salesItems!: SalesItems[];
    table!: Table | undefined;

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.establishment = _data["establishment"] ? Establishment.fromJS(_data["establishment"]) : <any>undefined;
            this.timestampArrival = _data["timestampArrival"] ? new Date(_data["timestampArrival"].toString()) : <any>undefined;
            this.timestampPayment = _data["timestampPayment"] ? new Date(_data["timestampPayment"].toString()) : <any>undefined;
            if (Array.isArray(_data["salesItems"])) {
                this.salesItems = [] as any;
                for (let item of _data["salesItems"])
                    this.salesItems!.push(SalesItems.fromJS(item));
            }
            this.table = _data["table"] ? Table.fromJS(_data["table"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Sale {
        data = typeof data === 'object' ? data : {};
        let result = new Sale();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["establishment"] = this.establishment ? this.establishment.toJSON() : <any>undefined;
        data["timestampArrival"] = this.timestampArrival ? this.timestampArrival.toISOString() : <any>undefined;
        data["timestampPayment"] = this.timestampPayment ? this.timestampPayment.toISOString() : <any>undefined;
        if (Array.isArray(this.salesItems)) {
            data["salesItems"] = [];
            for (let item of this.salesItems)
                data["salesItems"].push(item.toJSON());
        }
        data["table"] = this.table ? this.table.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export class SalesItems extends EntityBase {
    sale!: Sale;
    item!: Item;
    quantity!: number;

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.sale = _data["sale"] ? Sale.fromJS(_data["sale"]) : <any>undefined;
            this.item = _data["item"] ? Item.fromJS(_data["item"]) : <any>undefined;
            this.quantity = _data["quantity"];
        }
    }

    static override fromJS(data: any): SalesItems {
        data = typeof data === 'object' ? data : {};
        let result = new SalesItems();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sale"] = this.sale ? this.sale.toJSON() : <any>undefined;
        data["item"] = this.item ? this.item.toJSON() : <any>undefined;
        data["quantity"] = this.quantity;
        super.toJSON(data);
        return data;
    }
}

export abstract class ReturnBase {

    init(_data?: any) {
    }

    static fromJS(data: any): ReturnBase {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ReturnBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export class SalesQueryReturn extends ReturnBase {
    data!: { [key: string]: number; };

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
        }
    }

    static override fromJS(data: any): SalesQueryReturn {
        data = typeof data === 'object' ? data : {};
        let result = new SalesQueryReturn();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = (<any>this.data)[key];
            }
        }
        super.toJSON(data);
        return data;
    }
}

export abstract class CommandBase {

    init(_data?: any) {
    }

    static fromJS(data: any): CommandBase {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'CommandBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export class SalesQuery extends CommandBase {
    salesSortingParameters!: SalesSortingParameters | undefined;
    timeResolution!: TimeResolution;

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.salesSortingParameters = _data["salesSortingParameters"] ? SalesSortingParameters.fromJS(_data["salesSortingParameters"]) : <any>undefined;
            this.timeResolution = _data["timeResolution"];
        }
    }

    static override fromJS(data: any): SalesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new SalesQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["salesSortingParameters"] = this.salesSortingParameters ? this.salesSortingParameters.toJSON() : <any>undefined;
        data["timeResolution"] = this.timeResolution;
        super.toJSON(data);
        return data;
    }
}

export class SalesSortingParameters {
    mustContaiedItems!: string[] | undefined;
    useDataFromTimeframePeriods!: DateTimePeriod[] | undefined;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["mustContaiedItems"])) {
                this.mustContaiedItems = [] as any;
                for (let item of _data["mustContaiedItems"])
                    this.mustContaiedItems!.push(item);
            }
            if (Array.isArray(_data["useDataFromTimeframePeriods"])) {
                this.useDataFromTimeframePeriods = [] as any;
                for (let item of _data["useDataFromTimeframePeriods"])
                    this.useDataFromTimeframePeriods!.push(DateTimePeriod.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SalesSortingParameters {
        data = typeof data === 'object' ? data : {};
        let result = new SalesSortingParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.mustContaiedItems)) {
            data["mustContaiedItems"] = [];
            for (let item of this.mustContaiedItems)
                data["mustContaiedItems"].push(item);
        }
        if (Array.isArray(this.useDataFromTimeframePeriods)) {
            data["useDataFromTimeframePeriods"] = [];
            for (let item of this.useDataFromTimeframePeriods)
                data["useDataFromTimeframePeriods"].push(item.toJSON());
        }
        return data;
    }
}

export class DateTimePeriod {
    start!: Date;
    end!: Date;

    init(_data?: any) {
        if (_data) {
            this.start = _data["start"] ? new Date(_data["start"].toString()) : <any>undefined;
            this.end = _data["end"] ? new Date(_data["end"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DateTimePeriod {
        data = typeof data === 'object' ? data : {};
        let result = new DateTimePeriod();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["start"] = this.start ? this.start.toISOString() : <any>undefined;
        data["end"] = this.end ? this.end.toISOString() : <any>undefined;
        return data;
    }
}

export enum TimeResolution {
    Hour = 0,
    Date = 1,
    Month = 2,
    Year = 3,
}

export class SalesMeanQueryReturn extends ReturnBase {
    data!: { [key: string]: number; };

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
        }
    }

    static override fromJS(data: any): SalesMeanQueryReturn {
        data = typeof data === 'object' ? data : {};
        let result = new SalesMeanQueryReturn();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = (<any>this.data)[key];
            }
        }
        super.toJSON(data);
        return data;
    }
}

export class SalesMeanOverTime extends CommandBase {
    salesSortingParameters!: SalesSortingParameters | undefined;
    timeResolution!: TimeResolution;

    protected _discriminator: string;

    constructor() {
        super();
        this._discriminator = "SalesMeanOverTime";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.salesSortingParameters = _data["salesSortingParameters"] ? SalesSortingParameters.fromJS(_data["salesSortingParameters"]) : <any>undefined;
            this.timeResolution = _data["timeResolution"];
        }
    }

    static override fromJS(data: any): SalesMeanOverTime {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "SalesMeanOverTimeAverageSpend") {
            let result = new SalesMeanOverTimeAverageSpend();
            result.init(data);
            return result;
        }
        let result = new SalesMeanOverTime();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        data["salesSortingParameters"] = this.salesSortingParameters ? this.salesSortingParameters.toJSON() : <any>undefined;
        data["timeResolution"] = this.timeResolution;
        super.toJSON(data);
        return data;
    }
}

export class SalesMeanOverTimeAverageSpend extends SalesMeanOverTime {

    constructor() {
        super();
        this._discriminator = "SalesMeanOverTimeAverageSpend";
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): SalesMeanOverTimeAverageSpend {
        data = typeof data === 'object' ? data : {};
        let result = new SalesMeanOverTimeAverageSpend();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class CorrelationReturn extends ReturnBase {
    lagAndCorrelation!: { [key: string]: number; };

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (_data["lagAndCorrelation"]) {
                this.lagAndCorrelation = {} as any;
                for (let key in _data["lagAndCorrelation"]) {
                    if (_data["lagAndCorrelation"].hasOwnProperty(key))
                        (<any>this.lagAndCorrelation)![key] = _data["lagAndCorrelation"][key];
                }
            }
        }
    }

    static override fromJS(data: any): CorrelationReturn {
        data = typeof data === 'object' ? data : {};
        let result = new CorrelationReturn();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.lagAndCorrelation) {
            data["lagAndCorrelation"] = {};
            for (let key in this.lagAndCorrelation) {
                if (this.lagAndCorrelation.hasOwnProperty(key))
                    (<any>data["lagAndCorrelation"])[key] = (<any>this.lagAndCorrelation)[key];
            }
        }
        super.toJSON(data);
        return data;
    }
}

export class MeanShiftClusteringReturn extends ReturnBase {
    clusters!: Sale[][];
    calculations!: { [key: string]: number[]; };

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["clusters"])) {
                this.clusters = [] as any;
                for (let item of _data["clusters"])
                    this.clusters!.push(item);
            }
            if (_data["calculations"]) {
                this.calculations = {} as any;
                for (let key in _data["calculations"]) {
                    if (_data["calculations"].hasOwnProperty(key))
                        (<any>this.calculations)![key] = _data["calculations"][key] !== undefined ? _data["calculations"][key] : [];
                }
            }
        }
    }

    static override fromJS(data: any): MeanShiftClusteringReturn {
        data = typeof data === 'object' ? data : {};
        let result = new MeanShiftClusteringReturn();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.clusters)) {
            data["clusters"] = [];
            for (let item of this.clusters)
                data["clusters"].push(item);
        }
        if (this.calculations) {
            data["calculations"] = {};
            for (let key in this.calculations) {
                if (this.calculations.hasOwnProperty(key))
                    (<any>data["calculations"])[key] = (<any>this.calculations)[key];
            }
        }
        super.toJSON(data);
        return data;
    }
}

export abstract class MeanShiftClusteringCommand extends CommandBase {
    salesSortingParameters!: SalesSortingParameters | undefined;

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.salesSortingParameters = _data["salesSortingParameters"] ? SalesSortingParameters.fromJS(_data["salesSortingParameters"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): MeanShiftClusteringCommand {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'MeanShiftClusteringCommand' cannot be instantiated.");
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["salesSortingParameters"] = this.salesSortingParameters ? this.salesSortingParameters.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export class MSC_Sales_TimeOfVisit_LengthOfVisit extends MeanShiftClusteringCommand {

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): MSC_Sales_TimeOfVisit_LengthOfVisit {
        data = typeof data === 'object' ? data : {};
        let result = new MSC_Sales_TimeOfVisit_LengthOfVisit();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class MSC_Sales_TimeOfVisit_TotalPrice extends MeanShiftClusteringCommand {

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): MSC_Sales_TimeOfVisit_TotalPrice {
        data = typeof data === 'object' ? data : {};
        let result = new MSC_Sales_TimeOfVisit_TotalPrice();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class LoginCommand {
    username!: string;
    password!: string;

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginCommand {
        data = typeof data === 'object' ? data : {};
        let result = new LoginCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export class User extends EntityBase {
    email!: string;
    password!: string;
    userRoles!: UserRole[];

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            if (Array.isArray(_data["userRoles"])) {
                this.userRoles = [] as any;
                for (let item of _data["userRoles"])
                    this.userRoles!.push(UserRole.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        if (Array.isArray(this.userRoles)) {
            data["userRoles"] = [];
            for (let item of this.userRoles)
                data["userRoles"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class UserRole extends EntityBase {
    user!: User;
    establishment!: Establishment;
    role!: Role;

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
            this.establishment = _data["establishment"] ? Establishment.fromJS(_data["establishment"]) : <any>undefined;
            this.role = _data["role"];
        }
    }

    static override fromJS(data: any): UserRole {
        data = typeof data === 'object' ? data : {};
        let result = new UserRole();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["establishment"] = this.establishment ? this.establishment.toJSON() : <any>undefined;
        data["role"] = this.role;
        super.toJSON(data);
        return data;
    }
}

export enum Role {
    Admin = 0,
    User = 1,
}

export class FactoryServiceBuilder {

    init(_data?: any) {
    }

    static fromJS(data: any): FactoryServiceBuilder {
        data = typeof data === 'object' ? data : {};
        let result = new FactoryServiceBuilder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}